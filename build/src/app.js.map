{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/app.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,8CAA8C;AAE9C,yDAAyD;AACzD,iEAAiE;AAEjE,iDAA0E;AAE1E,MAAM,MAAM,GAAG,IAAI,sBAAM,CAAC,EAAI,CAAC,CAAC;AAChC,MAAM,IAAI,GAAG,IAAI,CAAC;AAGlB,yDAAyD;AACzD,YAAY;AACZ,MAAM;AAEN,iDAAiD;AACjD,0FAA0F;AAC1F,kCAAkC;AAClC,YAAY;AACZ,KAAK;AAEL,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC5B;;;OAGG;IACH,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,SAAS,YAAY,CAAC,GAAY,EAAE,GAAa,EAAE,IAAoB;IACrE,IAAI,EAAE,CAAC;AACT,CAAC;AAED,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAEzB,sCAAsC;AACtC,iDAAiD;AACjD,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC5C,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC9B,2CAA2C;IAC3C,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC1C,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC5B,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACvB,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC","sourcesContent":["'use strict';\n\n// import api = require('@opentelemetry/api');\n\n// const { diag, DiagConsoleLogger, DiagLogLevel } = api;\n// diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.VERBOSE);\n\nimport { MiddlewareNext, Request, Response, Server } from \"hyper-express\";\n\nconst server = new Server({  });\nconst PORT = 8080;\n\n\n// server.pre((req: any, res: any, next: () => void) => {\n//   next();\n// });\n\n// `setDefaultName` shows up in spans as the name\n// const setDefaultName = (req: { defaultName: string; }, res: any, next: () => void) => {\n//   req.defaultName = 'Stranger';\n//   next();\n// };\n\nserver.use((req, res, next) => {\n  /*\n    noop to showcase use with an array.\n    as this is an anonymous fn, the name is not known and cannot be displayed in traces.\n   */\n  next();\n});\n\nfunction myMiddleware(req: Request, res: Response, next: MiddlewareNext) {\n  next();\n}\n\nserver.use(myMiddleware);\n\n// named function to be used in traces\n// eslint-disable-next-line prefer-arrow-callback\nserver.get('/hello/:name', (req, res, next) => {\n  console.log('Handling hello');\n  // res.send(`Hello, ${req.params.name}\\n`);\n  res.sendStatus(400).send(JSON.stringify({ sucess: false}));\n});\n\nserver.get('/bye/:name', (req, res, next) => {\n  console.log('Handling bye');\n  res.send(\"bye\");\n});\n\nserver.listen(PORT, () => {\n  console.log('Ready on %s', server.port);\n});"]}