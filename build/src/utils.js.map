{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4CAA8D;AAG9D,gDAAgD;AACzC,MAAM,SAAS,GAAG,CAAC,KAAW,EAA6B,EAAE;IAClE,OAAO,CAAC,CAAC,CACP,KAAK;QACL,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU;QAChC,OAAO,KAAK,CAAC,KAAK,KAAK,UAAU;QACjC,KAAK,CAAC,QAAQ,EAAE,KAAK,kBAAkB,CACxC,CAAC;AACJ,CAAC,CAAC;AAPW,QAAA,SAAS,aAOpB;AAEF,sDAAsD;AAC/C,MAAM,eAAe,GAAG,CAAC,KAAe,EAAE,EAAE;;IACjD,OAAO,CAAC,CAAC,CACP,KAAK;QACL,OAAO,KAAK,KAAK,UAAU;QAC3B,CAAA,MAAA,KAAK,CAAC,WAAW,0CAAE,IAAI,MAAK,eAAe,CAC5C,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,eAAe,mBAM1B;AAEK,MAAM,mBAAmB,GAAG,CACjC,IAAc,EACd,UAAmB,EACH,EAAE;IAClB,MAAM,UAAU,GAAG,IAAI,KAAK,cAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACxD,4CAA4C;IAC5C,sBAAsB;IACtB,IAAI,UAAU,IAAI,UAAU,IAAI,GAAG,IAAI,UAAU,GAAG,UAAU,EAAE;QAC9D,OAAO,oBAAc,CAAC,KAAK,CAAC;KAC7B;IAED,4BAA4B;IAC5B,OAAO,oBAAc,CAAC,KAAK,CAAC;AAC9B,CAAC,CAAC;AAbW,QAAA,mBAAmB,uBAa9B;AAEK,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,EAAE;IACvC,YAAY;IACZ,OAAO,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;AACtD,CAAC,CAAA;AAHY,QAAA,SAAS,aAGrB","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanKind, SpanStatusCode } from \"@opentelemetry/api\";\nimport type { Server } from \"hyper-express\";\n\n// util.types.isPromise is supported from 10.0.0\nexport const isPromise = (value?: any): value is Promise<unknown> => {\n  return !!(\n    value &&\n    typeof value.then === 'function' &&\n    typeof value.catch === 'function' &&\n    value.toString() === '[object Promise]'\n  );\n};\n\n// util.types.isAsyncFunction is supported from 10.0.0\nexport const isAsyncFunction = (value?: unknown) => {\n  return !!(\n    value &&\n    typeof value === 'function' &&\n    value.constructor?.name === 'AsyncFunction'\n  );\n};\n\nexport const parseResponseStatus = (\n  kind: SpanKind,\n  statusCode?: number\n): SpanStatusCode => {\n  const upperBound = kind === SpanKind.CLIENT ? 400 : 500;\n  // 1xx, 2xx, 3xx are OK on client and server\n  // 4xx is OK on server\n  if (statusCode && statusCode >= 100 && statusCode < upperBound) {\n    return SpanStatusCode.UNSET;\n  }\n\n  // All other codes are error\n  return SpanStatusCode.ERROR;\n};\n\nexport const getScheme = (app: Server) => {\n  //@ts-ignore\n  return app._options.is_ssl ? 'https://' : 'http://';\n}\n"]}