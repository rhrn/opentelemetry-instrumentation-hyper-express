{"version":3,"file":"testInstrumentation.js","sourceRoot":"","sources":["../../src/testInstrumentation.ts"],"names":[],"mappings":";;AAAA,sDAAkD;AAClD,kEAAoE;AACpE,2FAA2F;AAC3F,4DAGoC;AACpC,uDAAgE;AAChE,oEAAgE;AAChE,oEAAgE;AAChE,4CAA4C;AAC5C,wFAAwF;AAExF,MAAM,QAAQ,GAAG,CAAC,CAAC,aAAqB,EAAE,EAAE;IAC1C,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QACrC,MAAM,cAAc,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACnD,IAAI,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAClC,OAAO,gCAAc,CAAC;SACvB;QACD,IAAI,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAClC,OAAO,gCAAc,CAAC;SACvB;KACF;IACD,OAAO,oCAAmB,CAAC;AAC7B,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;AAEd,yCAAyC;AACzC,iBAAiB;AACjB,IAAI;AAEJ,MAAM,GAAG,GAAG,IAAI,kBAAO,CAAC;IACtB,WAAW,EAAE,YAAY;IACzB,aAAa,EAAE,IAAI,QAAQ,EAAE;IAC7B,YAAY,EAAE,IAAI,2CAA6B,CAAC;QAC9C,QAAQ,EAAE,IAAI,mCAAqB,EAAE;KACtC,CAAC;IACF,gBAAgB,EAAE,CAAC,IAAI,6CAA2B,EAAE,CAAC;CACtD,CAAC,CAAC;AAEH,GAAG,CAAC,KAAK,EAAE,CAAC","sourcesContent":["import { NodeSDK } from '@opentelemetry/sdk-node';\nimport { ConsoleSpanExporter } from '@opentelemetry/sdk-trace-node';\n// import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport {\n  PeriodicExportingMetricReader,\n  ConsoleMetricExporter,\n} from '@opentelemetry/sdk-metrics';\nimport { HyperExpressInstrumentation } from './instrumentation';\nimport { ZipkinExporter } from '@opentelemetry/exporter-zipkin';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\n// import * as ot from '@opentelemetry/api';\n// const { RestifyInstrumentation } = require('@opentelemetry/instrumentation-restify');\n\nconst Exporter = ((exporterParam: string) => {\n  if (typeof exporterParam === 'string') {\n    const exporterString = exporterParam.toLowerCase();\n    if (exporterString.startsWith('z')) {\n      return ZipkinExporter;\n    }\n    if (exporterString.startsWith('j')) {\n      return JaegerExporter;\n    }\n  }\n  return ConsoleSpanExporter;\n})('console');\n\n// const otelTracer = ot.trace.getTracer(\n//   'my-service'\n// )\n\nconst sdk = new NodeSDK({\n  serviceName: \"my-service\",\n  traceExporter: new Exporter(),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new ConsoleMetricExporter(),\n  }),\n  instrumentations: [new HyperExpressInstrumentation()],\n});\n\nsdk.start();"]}